# Generated by Django 2.2.15 on 2022-08-18 13:27

import backend.custom_file_storage
import backend.custom_model_fields
import backend.models
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('Name', models.CharField(max_length=50)),
                ('Email', models.EmailField(max_length=254, unique=True)),
                ('Phone_number', models.CharField(max_length=25)),
                ('Created_at', models.DateTimeField(auto_now_add=True)),
                ('Updated_at', models.DateTimeField(auto_now=True)),
                ('Deleted_at', models.DateTimeField(default=None, null=True)),
                ('Status', models.CharField(blank=True, choices=[(1, 'Active'), (0, 'Inactive')], default=1, max_length=20)),
                ('is_active', models.BooleanField(default=True)),
            ],
            options={
                'abstract': False,
            },
            managers=[
                ('objects', backend.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='AtgPrimaryLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('local_id', models.IntegerField(blank=True, null=True)),
                ('multicont_polling_address', models.IntegerField(blank=True, null=True)),
                ('device_address', models.CharField(blank=True, max_length=50, null=True)),
                ('pv', models.CharField(blank=True, max_length=50, null=True)),
                ('pv_flag', models.CharField(blank=True, max_length=50, null=True)),
                ('tank_index', models.IntegerField(blank=True, null=True)),
                ('sv', models.CharField(blank=True, max_length=50, null=True)),
                ('read_at', models.CharField(blank=True, max_length=50, null=True)),
                ('db_fill_time', models.DateTimeField(auto_now_add=True)),
                ('controller_type', models.CharField(blank=True, max_length=50, null=True)),
                ('temperature', models.CharField(blank=True, max_length=50, null=True)),
                ('water', models.CharField(blank=True, max_length=50, null=True)),
                ('tc_volume', models.CharField(blank=True, max_length=50, null=True)),
                ('status', models.CharField(default=None, max_length=255, null=True)),
                ('probe_address', models.CharField(default=None, max_length=20, null=True)),
                ('flag_log', models.BooleanField(default=True)),
            ],
            options={
                'db_table': 'atg_primary_log',
                'ordering': ['-read_at'],
            },
        ),
        migrations.CreateModel(
            name='Companies',
            fields=[
                ('Company_id', models.AutoField(primary_key=True, serialize=False)),
                ('Name', models.CharField(max_length=100)),
                ('Country', models.CharField(max_length=100)),
                ('State', models.CharField(max_length=100)),
                ('City', models.CharField(max_length=100)),
                ('Address', models.CharField(max_length=100)),
                ('Company_type', models.CharField(choices=[('Multinational', 'Multinational'), ('Large', 'Large'), ('Medium', 'Medium'), ('Small', 'Small')], max_length=50)),
                ('Company_url', models.CharField(blank=True, max_length=100, null=True)),
                ('Company_image', models.ImageField(blank=True, null=True, storage=backend.custom_file_storage.CustomFileStorage(), upload_to='company_avatars')),
                ('Notes', models.TextField(blank=True, null=True)),
                ('Contact_person_name', models.CharField(max_length=100)),
                ('Contact_person_designation', models.CharField(max_length=100, null=True)),
                ('Contact_person_mail', models.CharField(max_length=100, null=True)),
                ('Contact_person_phone', models.CharField(max_length=100, null=True)),
                ('Created_at', models.DateTimeField(auto_now_add=True)),
                ('Updated_at', models.DateTimeField(auto_now=True)),
                ('Deleted_at', models.DateTimeField(default=None, null=True)),
                ('Active', models.BooleanField(default=True)),
                ('Owned', models.BooleanField(default=False)),
                ('genhours_access', models.BooleanField(default=False)),
                ('smarttank_access', models.BooleanField(default=False)),
                ('smartpump_access', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='CompanyGroups',
            fields=[
                ('Group_id', models.AutoField(primary_key=True, serialize=False)),
                ('Name', models.CharField(max_length=100, unique=True)),
                ('Status', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('Notes', models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='CompanyProductPriceRequest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('New_price', models.FloatField()),
                ('Scheduled_time', models.DateTimeField()),
                ('Approved', models.BooleanField(default=None, null=True)),
                ('Rejection_note', models.CharField(blank=True, max_length=200, null=True)),
                ('Approval_or_rejection_time', models.DateTimeField(blank=True, null=True)),
                ('db_fill_time', models.DateTimeField(auto_now_add=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Deliveries',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('volume', models.CharField(blank=True, max_length=50, null=True)),
                ('local_id', models.IntegerField(blank=True, null=True)),
                ('tc_volume', models.CharField(blank=True, max_length=50, null=True)),
                ('db_fill_time', models.DateTimeField(blank=True, null=True)),
                ('system_start_time', models.DateTimeField(blank=True, null=True)),
                ('system_end_time', models.DateTimeField(blank=True, null=True)),
                ('read_at', models.DateTimeField(blank=True, null=True)),
                ('polling_address', models.CharField(blank=True, max_length=50, null=True)),
                ('tank_index', models.CharField(blank=True, max_length=50, null=True)),
                ('device_address', models.CharField(blank=True, max_length=50, null=True)),
                ('controller_type', models.CharField(blank=True, max_length=50, null=True)),
                ('end_volume', models.CharField(blank=True, max_length=50, null=True)),
                ('start_volume', models.CharField(blank=True, max_length=50, null=True)),
                ('start_height', models.CharField(blank=True, max_length=50, null=True)),
                ('end_height', models.CharField(blank=True, max_length=50, null=True)),
            ],
            options={
                'db_table': 'deliveries',
            },
        ),
        migrations.CreateModel(
            name='DeviceFirmwareVersion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('device_mac_address', models.CharField(blank=True, max_length=100, null=True)),
                ('version_number', models.CharField(blank=True, max_length=100, null=True)),
                ('expected_version_number', models.CharField(blank=True, max_length=200, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'device_firmware_version',
            },
        ),
        migrations.CreateModel(
            name='DevicePriceExecution',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Time_executed', models.DateTimeField()),
                ('Price', models.FloatField()),
                ('Execution_status', models.BooleanField(default=False)),
                ('Pump_reference', models.CharField(max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='Devices',
            fields=[
                ('Device_id', models.AutoField(primary_key=True, serialize=False)),
                ('Name', models.CharField(max_length=50)),
                ('Device_unique_address', models.CharField(max_length=50, unique=True)),
                ('Phone_number', models.CharField(blank=True, max_length=50)),
                ('Created_at', models.DateTimeField(auto_now_add=True)),
                ('Updated_at', models.DateTimeField(auto_now=True)),
                ('Deleted_at', models.DateTimeField(default=None, null=True)),
                ('transmit_interval', models.PositiveIntegerField(blank=True, default=180)),
                ('Available', models.BooleanField(default=True)),
                ('Active', models.BooleanField(default=False)),
                ('ForPump', models.BooleanField(default=False)),
                ('Used', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='Equipment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('equipment_type', models.CharField(choices=[('GEN', 'Generator'), ('BLR', 'Boiler'), ('VEH', 'Vehicle')], default='GEN', max_length=20)),
                ('oem', models.CharField(max_length=200)),
                ('model', models.CharField(max_length=200)),
                ('oem_consumption_rate', models.FloatField(blank=True, null=True)),
                ('nominal_consumption_rate', models.FloatField(blank=True, null=True)),
                ('max_consumption_rate', models.FloatField(blank=True, null=True)),
                ('min_consumption_rate', models.FloatField(blank=True, null=True)),
                ('notes', models.TextField(blank=True)),
                ('initial_totaliser_hours', models.PositiveIntegerField(blank=True, default=0)),
                ('totaliser_hours', models.FloatField(blank=True, null=True)),
                ('totaliser_litres', models.FloatField(blank=True, default=0, null=True)),
                ('last_genhours_calculated_time', models.DateTimeField(blank=True, null=True)),
                ('running_hours_source', models.CharField(choices=[('FM', 'Flowmeter'), ('DI', 'Direct Integration'), ('HYB-FM', 'FM + DI(FM Primary)'), ('HYB-DI', 'FM + DI(DI Primary)')], max_length=20)),
                ('litres_consumed_source', models.CharField(choices=[('TL', 'Tank Levels'), ('FM', 'Flowmeter'), ('HYB-TL', 'TL + FM(TL Primary)'), ('HYB-FM', 'TL + FM(FM Primary)')], max_length=20)),
                ('address', models.PositiveIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(3)])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('active', models.BooleanField(default=True)),
                ('gen_phase', models.PositiveIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(3)])),
            ],
        ),
        migrations.CreateModel(
            name='Flowmeter',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('serial_number', models.CharField(max_length=200, unique=True)),
                ('max_temp', models.FloatField(blank=True, null=True)),
                ('meter_type', models.CharField(choices=[('DFM', 'DFM Modbus'), ('PUL', 'Pulser')], default='DFM', max_length=50)),
                ('address', models.PositiveIntegerField()),
                ('active', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='FlowmeterLogs',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uid', models.CharField(default=None, max_length=50)),
                ('mac_address', models.CharField(max_length=50)),
                ('flowmeter_address', models.IntegerField()),
                ('litres', models.FloatField()),
                ('hours', models.FloatField()),
                ('forward_litres', models.FloatField()),
                ('backward_litres', models.FloatField()),
                ('forward_fuel_rate', models.FloatField()),
                ('backward_fuel_rate', models.FloatField()),
                ('consumption_rate', models.FloatField()),
                ('temperature', models.FloatField()),
                ('status', models.IntegerField()),
                ('mode', models.CharField(max_length=50)),
                ('timestamp', models.DateTimeField()),
                ('db_fill_time', models.DateTimeField(auto_now_add=True)),
                ('flowmeter_serial_number', models.CharField(blank=True, default='Test', max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='FlowmeterTransactionComment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('trx_end_time', models.CharField(max_length=50)),
                ('comment', models.TextField(blank=True)),
                ('comment_create_author', models.CharField(max_length=50)),
                ('comment_create_time', models.DateTimeField(auto_now_add=True)),
                ('comment_edit_author', models.CharField(blank=True, max_length=50)),
                ('comment_edit_time', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='GeneratorHours',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mac_address', models.CharField(max_length=50)),
                ('lineID', models.IntegerField()),
                ('status', models.IntegerField()),
                ('timestamp', models.DateTimeField()),
                ('db_fill_time', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='LatestAtgLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Tank_id', models.IntegerField(unique=True)),
                ('Tank_name', models.CharField(blank=True, max_length=50, null=True)),
                ('Volume', models.FloatField(blank=True, null=True)),
                ('Height', models.CharField(blank=True, max_length=10, null=True)),
                ('temperature', models.CharField(blank=True, max_length=10, null=True)),
                ('water', models.CharField(blank=True, max_length=10, null=True)),
                ('db_updated_time', models.DateTimeField(auto_now=True, null=True)),
                ('last_updated_time', models.DateTimeField(blank=True, null=True)),
                ('Site_id', models.IntegerField(blank=True, null=True)),
                ('siteName', models.CharField(max_length=100)),
                ('Capacity', models.PositiveIntegerField()),
                ('Unit', models.CharField(blank=True, max_length=50, null=True)),
                ('DisplayUnit', models.CharField(blank=True, max_length=50, null=True)),
                ('Product', models.CharField(blank=True, max_length=50, null=True)),
                ('Fill', models.FloatField(default=None, null=True)),
                ('Tank_controller', models.CharField(default='MTC', max_length=50)),
                ('Reorder', models.IntegerField(blank=True, default=0, null=True)),
                ('LL_Level', models.IntegerField(blank=True, default=0, null=True)),
                ('HH_Level', models.IntegerField(blank=True, default=0, null=True)),
                ('Tank_Status', models.BooleanField(default=True)),
                ('Tank_Note', models.CharField(blank=True, max_length=25, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='MaintenanceInfo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('maintenance_date', models.DateField()),
                ('notes', models.TextField(blank=True)),
                ('genhours', models.FloatField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('equipment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='maintenance_infos', to='backend.Equipment')),
            ],
        ),
        migrations.CreateModel(
            name='Modules',
            fields=[
                ('module_id', models.AutoField(primary_key=True, serialize=False)),
                ('module_name', models.CharField(max_length=50, unique=True)),
                ('active', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='NewUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('Name', models.CharField(max_length=50)),
                ('Email', models.EmailField(max_length=254, unique=True)),
                ('Phone_number', models.CharField(max_length=25)),
                ('Created_at', models.DateTimeField(auto_now_add=True)),
                ('Updated_at', models.DateTimeField(auto_now=True)),
                ('Deleted_at', models.DateTimeField(default=None, null=True)),
                ('Status', models.CharField(blank=True, choices=[(1, 'Active'), (0, 'Inactive')], default=1, max_length=20)),
                ('is_active', models.BooleanField(default=True)),
                ('NewCompany', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='userscompany', to='backend.Companies')),
            ],
            options={
                'abstract': False,
            },
            managers=[
                ('objects', backend.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='PasswordReset',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_id', models.PositiveIntegerField()),
                ('token', models.CharField(max_length=100)),
                ('confirmation_status', models.BooleanField(default=False)),
                ('reset_request_time', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Probes',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('slug', models.CharField(max_length=50)),
                ('probe_chart', models.FileField(blank=True, null=True, storage=backend.custom_file_storage.CustomFileStorage(), upload_to='probe_charts/')),
            ],
        ),
        migrations.CreateModel(
            name='Products',
            fields=[
                ('Product_id', models.AutoField(primary_key=True, serialize=False)),
                ('Name', models.CharField(max_length=50)),
                ('Code', models.CharField(max_length=10)),
                ('Created_at', models.DateTimeField(auto_now_add=True)),
                ('Updated_at', models.DateTimeField(auto_now=True)),
                ('Deleted_at', models.DateTimeField(default=None, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='PumpBrand',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Name', models.CharField(max_length=255, unique=True)),
                ('OEM', models.CharField(max_length=255, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='PumpDeviceHeartbeats',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('local_ip', models.CharField(blank=True, max_length=50, null=True)),
                ('device_mac_address', models.CharField(blank=True, max_length=100, null=True)),
                ('last_time_online', models.DateTimeField(blank=True, null=True)),
                ('source', models.CharField(blank=True, max_length=50, null=True)),
                ('last_transaction_time', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'pump_device_heartbeats',
            },
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('Role_id', models.AutoField(primary_key=True, serialize=False)),
                ('Name', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='Sites',
            fields=[
                ('Site_id', models.AutoField(primary_key=True, serialize=False)),
                ('Name', models.CharField(max_length=100)),
                ('Country', models.CharField(max_length=50)),
                ('State', models.CharField(max_length=100)),
                ('City', models.CharField(max_length=100)),
                ('Address', models.CharField(max_length=100)),
                ('Latitude', models.CharField(blank=True, max_length=100, null=True)),
                ('Longitude', models.CharField(blank=True, max_length=100, null=True)),
                ('Location_status', models.BooleanField(default=False)),
                ('Site_type', models.CharField(choices=[('', 'Choose Site type'), ('Industrial', 'Industrial'), ('Logistics', 'Logistics'), ('Banking', 'Banking'), ('Agricultural', 'Agricultural'), ('Education', 'Education'), ('Hospitality', 'Hospitality'), ('Mining', 'Mining'), ('Military', 'Military'), ('Manufacturing', 'Manufacturing'), ('Marine', 'Marine'), ('Downstream', 'Downstream'), ('Upstream', 'Upstream'), ('Aviation', 'Aviation'), ('Corporate', 'Corporate'), ('Real Estate', 'Real Estate')], max_length=50)),
                ('Notes', models.TextField(blank=True, null=True)),
                ('SIM_provided_details', models.CharField(blank=True, max_length=50)),
                ('Number_of_tanks', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(1)])),
                ('Reorder_mail', backend.custom_model_fields.EmailListField(blank=True, default='', null=True)),
                ('Critical_level_mail', backend.custom_model_fields.EmailListField(blank=True, default='', null=True)),
                ('Contact_person_name', models.CharField(blank=True, max_length=100)),
                ('Contact_person_designation', models.CharField(blank=True, max_length=100, null=True)),
                ('Contact_person_mail', models.CharField(blank=True, max_length=100, null=True)),
                ('Contact_person_phone', models.CharField(blank=True, max_length=100, null=True)),
                ('Created_at', models.DateTimeField(auto_now_add=True)),
                ('Updated_at', models.DateTimeField(auto_now=True)),
                ('Deleted_at', models.DateTimeField(default=None, null=True)),
                ('Active', models.BooleanField(default=True)),
                ('Communication_status', models.BooleanField(default=True)),
                ('Communication_update_time', models.DateTimeField(blank=True, null=True)),
                ('Email_Notification', models.BooleanField(default=True)),
                ('genhours_access', models.BooleanField(default=False)),
                ('smarttank_access', models.BooleanField(default=False)),
                ('smartpump_access', models.BooleanField(default=False)),
                ('Company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sites', to='backend.Companies')),
                ('Device', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='site', to='backend.Devices')),
            ],
        ),
        migrations.CreateModel(
            name='TankAlarmDispatcher',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tank_id', models.IntegerField()),
                ('alarm_type', models.CharField(blank=True, max_length=45, null=True)),
                ('last_time_mail_sent', models.DateTimeField(blank=True, null=True)),
                ('volume', models.FloatField(blank=True, null=True)),
            ],
            options={
                'db_table': 'tank_alarm_dispatcher',
            },
        ),
        migrations.CreateModel(
            name='UniqueAddressTracker',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('address', models.CharField(blank=True, max_length=250, null=True, unique=True)),
                ('date_created', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Version',
            fields=[
                ('Version_id', models.AutoField(primary_key=True, serialize=False)),
                ('Version_number', models.CharField(max_length=50, unique=True)),
                ('Download_link', models.TextField()),
                ('Filename', models.CharField(max_length=50)),
                ('Created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('birth_date', models.DateField()),
                ('sex', models.CharField(choices=[('Male', 'Male'), ('Female', 'Female')], max_length=50)),
                ('user', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='backend.NewUser')),
            ],
        ),
        migrations.CreateModel(
            name='UserAccessPermissions',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('permission_name', models.CharField(max_length=20, unique=True)),
                ('read', models.BooleanField(default=False)),
                ('create', models.BooleanField(default=False)),
                ('update', models.BooleanField(default=False)),
                ('delete', models.BooleanField(default=False)),
                ('module', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='backend.Modules')),
            ],
        ),
        migrations.CreateModel(
            name='TransactionData',
            fields=[
                ('Transaction_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('local_id', models.CharField(max_length=255, unique=True)),
                ('Nozzle_address', models.CharField(max_length=255)),
                ('Transaction_start_time', models.DateTimeField(null=True)),
                ('Transaction_stop_time', models.DateTimeField()),
                ('Transaction_raw_volume', models.FloatField()),
                ('Transaction_raw_amount', models.FloatField()),
                ('Raw_transaction_price_per_unit', models.FloatField()),
                ('Pump_mac_address', models.CharField(max_length=255)),
                ('Transaction_start_pump_totalizer_volume', models.FloatField(null=True)),
                ('Transaction_stop_pump_totalizer_volume', models.FloatField(null=True)),
                ('Transaction_start_pump_totalizer_amount', models.FloatField(null=True)),
                ('Transaction_stop_pump_totalizer_amount', models.FloatField(null=True)),
                ('Product_name', models.CharField(blank=True, max_length=255, null=True)),
                ('Uploaded_time', models.DateTimeField(auto_now_add=True, null=True)),
                ('pump_temperature', models.CharField(blank=True, max_length=255, null=True)),
                ('Device', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.Devices')),
                ('Site', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='transaction_data', to='backend.Sites')),
            ],
        ),
        migrations.CreateModel(
            name='Tanks',
            fields=[
                ('Tank_id', models.AutoField(primary_key=True, serialize=False)),
                ('Name', models.CharField(blank=True, max_length=50, null=True)),
                ('Control_mode', models.CharField(default='C', max_length=50)),
                ('Tank_controller', models.CharField(default='MTC', max_length=50)),
                ('Controller_polling_address', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)])),
                ('Tank_index', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(999999)])),
                ('Capacity', models.PositiveIntegerField()),
                ('UOM', models.CharField(choices=[('L', 'Litres'), ('T', 'Tonnes'), ('KG', 'Kilogrammes'), ('m', 'metres'), ('mm', 'millimeters'), ('cm', 'centimeters'), ('m3', 'cubic-meters'), ('gal', 'Gallons')], default='L', max_length=50)),
                ('Shape', models.CharField(choices=[('LC', 'Lying Cylindrical'), ('SC', 'Standing Cylindrical'), ('LR', 'Lying Rectangular'), ('SR', 'Standing Rectangular'), ('SRV', 'Standard Round View')], default='LC', max_length=50)),
                ('LL_Level', models.IntegerField(blank=True, default=0, null=True)),
                ('L_Level', models.IntegerField(blank=True, default=0, null=True)),
                ('HH_Level', models.IntegerField(blank=True, default=0, null=True)),
                ('H_Level', models.IntegerField(blank=True, default=0, null=True)),
                ('Reorder', models.IntegerField(blank=True, default=0, null=True)),
                ('Leak', models.IntegerField(blank=True, default=0, null=True)),
                ('Created_at', models.DateTimeField(auto_now_add=True)),
                ('Updated_at', models.DateTimeField(auto_now=True)),
                ('Deleted_at', models.DateTimeField(default=None, null=True)),
                ('Status', models.BooleanField(default=True)),
                ('CalibrationChart', models.FileField(blank=True, null=True, storage=backend.custom_file_storage.CustomFileStorage(), upload_to='calibration_charts')),
                ('Offset', models.FloatField(blank=True, default=0.0, null=True)),
                ('Po4', models.FloatField(blank=True, default=0.0, null=True)),
                ('Display_unit', models.CharField(blank=True, choices=[('L', 'Litres'), ('T', 'Tonnes'), ('KG', 'Kilogrammes'), ('m', 'metres'), ('mm', 'millimeters'), ('cm', 'centimeters'), ('m3', 'cubic-meters'), ('gal', 'Gallons')], default='L', max_length=50)),
                ('Density', models.FloatField(default=None, null=True)),
                ('Tank_height', models.FloatField(default=None, null=True)),
                ('Anomaly_period', models.FloatField(default=None, null=True)),
                ('Anomaly_volume', models.FloatField(default=None, null=True)),
                ('Tank_Note', models.CharField(blank=True, max_length=25, null=True)),
                ('Product', models.ForeignKey(blank=True, default=1, null=True, on_delete=django.db.models.deletion.SET_NULL, to='backend.Products')),
                ('Site', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tanks', to='backend.Sites')),
            ],
        ),
        migrations.CreateModel(
            name='TankLogAnomaly',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('anomaly_period', models.CharField(blank=True, max_length=100, null=True)),
                ('anomaly_difference', models.CharField(blank=True, max_length=50, null=True)),
                ('company_name', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='companies', to='backend.Companies')),
                ('site_name', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sites', to='backend.Sites')),
                ('tank_name', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tank_index', to='backend.Tanks')),
            ],
        ),
        migrations.CreateModel(
            name='TankGroups',
            fields=[
                ('Group_id', models.AutoField(primary_key=True, serialize=False)),
                ('Name', models.CharField(max_length=50)),
                ('UOM', models.CharField(choices=[('L', 'Litres'), ('T', 'Tonnes'), ('KG', 'Kilogrammes'), ('m', 'metres'), ('mm', 'millimeters'), ('cm', 'centimeters'), ('m3', 'cubic-meters'), ('gal', 'Gallons')], max_length=50)),
                ('Critical_level_mail', backend.custom_model_fields.EmailListField(blank=True, default='', null=True)),
                ('Reorder_mail', backend.custom_model_fields.EmailListField(blank=True, default='', null=True)),
                ('Reorder_Level', models.IntegerField(blank=True, null=True)),
                ('Notes', models.TextField(blank=True)),
                ('Created_at', models.DateTimeField(auto_now_add=True)),
                ('Updated_at', models.DateTimeField(auto_now=True)),
                ('Deleted_at', models.DateTimeField(default=None, null=True)),
                ('Status', models.BooleanField(default=True)),
                ('Company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tankgroups', to='backend.Companies')),
                ('Product', models.ForeignKey(blank=True, default=1, null=True, on_delete=django.db.models.deletion.SET_NULL, to='backend.Products')),
                ('Tanks', models.ManyToManyField(blank=True, to='backend.Tanks')),
            ],
        ),
        migrations.CreateModel(
            name='SiteGroups',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Name', models.CharField(max_length=50)),
                ('Active', models.BooleanField(default=True)),
                ('Company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sitegroups', to='backend.Companies')),
                ('Sites', models.ManyToManyField(blank=True, to='backend.Sites')),
            ],
        ),
        migrations.CreateModel(
            name='SiteGenHoursConfiguration',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('monitor_public_power', models.BooleanField(default=False)),
                ('public_power_source_slug', models.CharField(default='PHCN Source', max_length=50)),
                ('site', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='genhours_config', to='backend.Sites')),
            ],
        ),
        migrations.CreateModel(
            name='RawPriceChangeData',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('New_price', models.FloatField()),
                ('Scheduled_time', models.DateTimeField()),
                ('Approved', models.BooleanField(default=None, null=True)),
                ('Product', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='raw_price_change', to='backend.Products')),
                ('Site', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='raw_price_change', to='backend.Sites')),
            ],
        ),
        migrations.CreateModel(
            name='Pump',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Name', models.CharField(max_length=255)),
                ('Pump_protocol', models.CharField(max_length=255)),
                ('Nozzle_count', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(4)])),
                ('Note', models.TextField(blank=True, max_length=255, null=True)),
                ('Activate', models.BooleanField(blank=True, default=True)),
                ('Pushed_to_device', models.BooleanField(blank=True, default=False)),
                ('Device', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='pumps', to='backend.Devices')),
                ('Pumpbrand', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pumps', to='backend.PumpBrand')),
                ('Site', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pumps', to='backend.Sites')),
            ],
        ),
        migrations.CreateModel(
            name='ProductPriceHistory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Price', models.FloatField()),
                ('Sheduled_time', models.DateTimeField()),
                ('Initial', models.BooleanField(default=False)),
                ('Reference_code', models.CharField(blank=True, max_length=100, null=True)),
                ('db_fill_time', models.DateTimeField(auto_now_add=True, null=True)),
                ('Approved_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='product_price_history', to=settings.AUTH_USER_MODEL)),
                ('Company', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='product_price_history', to='backend.Companies')),
                ('Product', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='backend.Products')),
                ('Site', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='product_price', to='backend.Sites')),
            ],
        ),
        migrations.CreateModel(
            name='PriceChangeRequestData',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('New_price', models.FloatField()),
                ('Scheduled_time', models.DateTimeField()),
                ('Approved', models.BooleanField(default=None, null=True)),
                ('Rejection_note', models.CharField(blank=True, max_length=200, null=True)),
                ('Approval_or_rejection_time', models.DateTimeField(blank=True, null=True)),
                ('db_fill_time', models.DateTimeField(auto_now_add=True, null=True)),
                ('Actor', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='raw_price_change_request_actor', to=settings.AUTH_USER_MODEL)),
                ('Company', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='raw_price_change_request', to='backend.Companies')),
                ('Initiator', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='raw_price_change_request_initiator', to=settings.AUTH_USER_MODEL)),
                ('Product', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='raw_price_change_request', to='backend.Products')),
                ('Site', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='raw_product_price_request', to='backend.Sites')),
            ],
        ),
        migrations.CreateModel(
            name='PriceChange',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('New_price', models.FloatField()),
                ('mac_address', models.CharField(max_length=255)),
                ('Nozzle_address', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(1)])),
                ('Note', models.TextField(max_length=255)),
                ('Scheduled_time', models.DateTimeField()),
                ('Received', models.BooleanField(default=False)),
                ('Approved', models.BooleanField(default=False)),
                ('Rejected', models.BooleanField(default=False)),
                ('TimeImplementedOnDevice', models.DateTimeField(blank=True, null=True)),
                ('ImplementedOnDeviceStatus', models.BooleanField(default=False)),
                ('Product', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='price_change', to='backend.Products')),
                ('Site', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='price_change', to='backend.Sites')),
            ],
        ),
        migrations.CreateModel(
            name='PowermeterLogs',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uid', models.CharField(default=None, max_length=50)),
                ('mac_address', models.CharField(db_index=True, max_length=50)),
                ('powermeter_address', models.IntegerField()),
                ('voltage_a', models.FloatField(blank=True, null=True)),
                ('voltage_b', models.FloatField(blank=True, null=True)),
                ('voltage_c', models.FloatField(blank=True, null=True)),
                ('current_a', models.FloatField(blank=True, null=True)),
                ('current_b', models.FloatField(blank=True, null=True)),
                ('current_c', models.FloatField(blank=True, null=True)),
                ('power_a', models.FloatField(blank=True, null=True)),
                ('power_b', models.FloatField(blank=True, null=True)),
                ('power_c', models.FloatField(blank=True, null=True)),
                ('power_total', models.FloatField(blank=True, null=True)),
                ('frequency', models.FloatField(blank=True, null=True)),
                ('power_factor', models.FloatField(blank=True, null=True)),
                ('active_energy', models.FloatField(blank=True, null=True)),
                ('status', models.IntegerField(default=0)),
                ('timestamp', models.DateTimeField(db_index=True)),
                ('engine_running', models.IntegerField(blank=True, null=True)),
                ('db_fill_time', models.DateTimeField(auto_now_add=True, null=True)),
                ('equipment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='powermeterlogs', to='backend.Equipment')),
            ],
        ),
        migrations.CreateModel(
            name='PowerMeter',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('serial_number', models.CharField(help_text='Mapping each Power Meter', max_length=200, unique=True)),
                ('meter_type', models.CharField(choices=[('DPP', 'Digital Power Probe'), ('DPM', 'Digital Power Meter')], default='DPP', max_length=50)),
                ('address', models.PositiveIntegerField()),
                ('active', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('equipment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='powermeter', to='backend.Equipment')),
                ('site', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='powermeters', to='backend.Sites')),
            ],
        ),
        migrations.CreateModel(
            name='Nozzle',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Name', models.CharField(max_length=255)),
                ('Nozzle_address', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(1)])),
                ('Decimal_setting_price_unit', models.IntegerField(validators=[django.core.validators.MinValueValidator(0)])),
                ('Decimal_setting_amount', models.IntegerField(validators=[django.core.validators.MinValueValidator(1)])),
                ('Decimal_setting_volume', models.IntegerField(validators=[django.core.validators.MinValueValidator(1)])),
                ('Totalizer_at_installation', models.IntegerField(validators=[django.core.validators.MinValueValidator(0)])),
                ('Display_unit', models.CharField(choices=[('L', 'Litres'), ('T', 'Tonnes'), ('KG', 'Kilogrammes'), ('m', 'metres'), ('mm', 'millimeters'), ('cm', 'centimeters'), ('m3', 'cubic-meters'), ('gal', 'Gallons')], default='L', max_length=50)),
                ('Nominal_flow_rate', models.IntegerField(validators=[django.core.validators.MinValueValidator(1)])),
                ('Product', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='nozzle', to='backend.Products')),
                ('Pump', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='nozzles', to='backend.Pump')),
            ],
        ),
        migrations.CreateModel(
            name='NewUserRole',
            fields=[
                ('Role_id', models.AutoField(primary_key=True, serialize=False)),
                ('Name', models.CharField(max_length=50, unique=True)),
                ('description', models.CharField(blank=True, max_length=255, null=True)),
                ('active', models.BooleanField(default=True)),
                ('role_permission', models.ManyToManyField(blank=True, related_name='permissionroles', to='backend.UserAccessPermissions')),
            ],
        ),
        migrations.AddField(
            model_name='newuser',
            name='Role',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='backend.NewUserRole'),
        ),
        migrations.AddField(
            model_name='newuser',
            name='Sites',
            field=models.ManyToManyField(blank=True, related_name='userssites', to='backend.Sites'),
        ),
        migrations.CreateModel(
            name='MaintenanceInfoImage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(storage=backend.custom_file_storage.CustomFileStorage(), upload_to=backend.models.get_image_filename)),
                ('maintenance_info', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='info_images', to='backend.MaintenanceInfo')),
            ],
        ),
        migrations.CreateModel(
            name='MaintenanceConfig',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mode', models.CharField(choices=[('HR/D', 'Hours/Days'), ('SCH', 'Schedule(Days)')], max_length=50)),
                ('hours', models.IntegerField(null=True)),
                ('days', models.IntegerField(null=True)),
                ('scheduled_days', models.IntegerField(null=True)),
                ('equipment', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='maintenance_config', to='backend.Equipment')),
            ],
        ),
        migrations.AddIndex(
            model_name='latestatglog',
            index=models.Index(fields=['Site_id'], name='backend_lat_Site_id_695851_idx'),
        ),
        migrations.AddIndex(
            model_name='generatorhours',
            index=models.Index(fields=['mac_address', 'lineID'], name='backend_gen_mac_add_98a53b_idx'),
        ),
        migrations.AddField(
            model_name='flowmetertransactioncomment',
            name='equipment',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='equipment_transaction_comments', to='backend.Equipment'),
        ),
        migrations.AddIndex(
            model_name='flowmeterlogs',
            index=models.Index(fields=['mac_address', 'flowmeter_address'], name='backend_flo_mac_add_f300e9_idx'),
        ),
        migrations.AddField(
            model_name='flowmeter',
            name='site',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='flowmeters', to='backend.Sites'),
        ),
        migrations.AddField(
            model_name='equipment',
            name='flowmeter',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='equipment', to='backend.Flowmeter'),
        ),
        migrations.AddField(
            model_name='equipment',
            name='product',
            field=models.ForeignKey(blank=True, default=1, null=True, on_delete=django.db.models.deletion.SET_NULL, to='backend.Products'),
        ),
        migrations.AddField(
            model_name='equipment',
            name='site',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='equipments', to='backend.Sites'),
        ),
        migrations.AddField(
            model_name='equipment',
            name='source_tanks',
            field=models.ManyToManyField(blank=True, to='backend.Tanks'),
        ),
        migrations.AddField(
            model_name='devices',
            name='Company',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='devices', to='backend.Companies'),
        ),
        migrations.AddField(
            model_name='devicepriceexecution',
            name='Company',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='executed_prices', to='backend.Companies'),
        ),
        migrations.AddField(
            model_name='devicepriceexecution',
            name='Product',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='executed_prices', to='backend.Products'),
        ),
        migrations.AddField(
            model_name='devicepriceexecution',
            name='Site',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='executed_prices', to='backend.Sites'),
        ),
        migrations.AddField(
            model_name='devicefirmwareversion',
            name='device',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='firmware', to='backend.Devices'),
        ),
        migrations.AddField(
            model_name='companyproductpricerequest',
            name='Actor',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='company_product_price_change_request_actor', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companyproductpricerequest',
            name='Company',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='product_price_change_request', to='backend.Companies'),
        ),
        migrations.AddField(
            model_name='companyproductpricerequest',
            name='Initiator',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='company_product_price_change_request_initiator', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companyproductpricerequest',
            name='Product',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='company_product_price_change_request', to='backend.Products'),
        ),
        migrations.AddField(
            model_name='companygroups',
            name='Companies',
            field=models.ManyToManyField(blank=True, related_name='group', to='backend.Companies'),
        ),
        migrations.AddField(
            model_name='user',
            name='Company',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='users', to='backend.Companies'),
        ),
        migrations.AddField(
            model_name='user',
            name='Role',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='backend.Role'),
        ),
        migrations.AddField(
            model_name='user',
            name='Sites',
            field=models.ManyToManyField(blank=True, related_name='users', to='backend.Sites'),
        ),
    ]
